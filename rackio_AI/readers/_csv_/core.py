import pandas as pd
from easy_deco.progress_bar import ProgressBar
from rackio_AI import Utils
from rackio import Rackio
import os


class CSV:
    """
    The so-called CSV (Comma Separated Values) format is the most common import and export format
    for spreadsheets and databases.

    The CSV class implements methods to read and write tabular data in CSV format. It allows programmers
    to say, "write this data in the format preferred by Excel", or "read data from this file which was
    generated by Excel" without knowing the precise details of the CSV format used by Excel. Programmers
    can also describe the CSV formats understood by other applications or define their own special-purpose
    CSV formats.

    The CSV classâ€™s reader and writer objects read and write sequences. Programmers can also read and write
    data in dictionary form using the DictReader and DictWriter classes.
    """

    app = Rackio()

    @ProgressBar(desc="Reading csv file...", unit="rows")
    def __reader(self, csv_file, **kwargs):
        """
        Documentation here
        """
            
        self._df_.append(pd.read_csv(csv_file, **kwargs))
        
        return

    def reader(self, csv_files, **csv_options):
        """
        Read a comma-separated-values (csv) file into DataFrame.

        Also supports optionally iterating or breaking of the file into chunks.

        **Parameters**

        """
        default_csv_options = Utils.load_json(os.path.join("json", "csv_options.json"))
        csv_options = Utils.check_default_kwargs(default_csv_options, csv_options)
        if os.path.isdir(csv_files):
            
            filenames = Utils.find_files(".csv", csv_files)
        
        elif os.path.isfile(csv_files):

            filenames = [csv_files]
        self._df_ = list()
        self.__reader(filenames, **csv_options)
        self.app.data = pd.concat(self._df_)

        return self.app.data

    def read_hysys(self, csv_files, **csv_options):
        """
        Documentation here
        """
        default_hysys_options = Utils.load_json(os.path.join("json", "hysys_options.json"))
        csv_options = Utils.check_default_kwargs(default_hysys_options, csv_options)

        df = self.reader(csv_files, **csv_options)

        columns = list(df.columns)
        units = list(df.iloc[0,:])
        new_columns = {key: ("{}".format(key),"{}".format(units[i])) for i, key in enumerate(columns)}

        df = df.rename(columns=new_columns)
        index_unit = df.index[0]
        df.index.name = ("{}".format(df.index.name),"{}".format(index_unit))
        df = df.drop(index_unit)

        self.app.data = df

        return df
    

if __name__ == "__main__":
    csv_obj = CSV()
    csv_file_path = os.path.join("..","..", "data", "csv", "Hysys")
    df = csv_obj.read_hysys(csv_file_path)
    df.info()
    print(df.head(10))